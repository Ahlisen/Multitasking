<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Persistant variables
game_over = false;
winner = -1;

for(team = 0; team &lt; o_settings.teams; team++) {
    scores[team] = 0;
    gamepad_set_axis_deadzone(team, .25);
}

display_set_gui_size(room_width,room_height);

width = 0;
height = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy grid
ds_grid_destroy(grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy grid
ds_grid_destroy(grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the level
// Resize
var grid_size = 32;
room_width = (CELL_WIDTH/grid_size) * room_width;
room_height = (CELL_HEIGHT/grid_size) * room_height;

width = room_width div CELL_WIDTH;
height = room_height div CELL_HEIGHT;

grid = ds_grid_create(width, height);
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);


// Create controller in center
var cx = width div 2;
var cy = height div 2;

// Give controller random direction
var cdir = irandom(3);

//Odds for changing direction
var odds = 1;

repeat(400) {
    //Place floor at controller pos
    grid[# cx, cy] = FLOOR;
    
    //Randomize direction
    if (irandom(odds) == odds) {
        cdir = irandom(3);
    }
    
    //Move
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cy += ydir;
    
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2); 
}

//Create safe spawn areas
var my = height div 2;
var mx = width div 2;
for (var x_step = mx-2; x_step &lt; mx+2; x_step++) {
    for (var y_step = my-2; y_step &lt; my+ceil(o_settings.teams/2); y_step++) {
        grid[# x_step, y_step] = FLOOR;
    }
}
/*
for (var step = mx; step &lt; mx+1; step++) {
    grid[# step, my] = WALL;
    grid[# step, my+1] = WALL;
}
*/
var corners = o_settings.corners;
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if(grid[# xx, yy] == FLOOR) {
            var count_x = 0;
            var count_y = 0;
            if(grid[# xx+1, yy] != FLOOR &amp;&amp; grid[# xx+1, yy] != CORNER) {grid[# xx+1, yy] = WALL;} else {count_x++;}
            if(grid[# xx-1, yy] != FLOOR &amp;&amp; grid[# xx-1, yy] != CORNER) {grid[# xx-1, yy] = WALL;} else {count_x++;}
            if(grid[# xx, yy+1] != FLOOR &amp;&amp; grid[# xx, yy+1] != CORNER) {grid[# xx, yy+1] = WALL;} else {count_y++;}
            if(grid[# xx, yy-1] != FLOOR &amp;&amp; grid[# xx, yy-1] != CORNER) {grid[# xx, yy-1] = WALL;} else {count_y++;}
            
            if(corners != 1) {
                if(corners == 2 &amp;&amp; random(1) &gt;= 0.5 || corners == 3) {
                    if(count_x == 1 &amp;&amp; count_y == 1) {
                        grid[# xx, yy] = CORNER;
                    }
                }
            }
        }
    }
}

for (var yy = 0; yy &lt; height; yy++) {
    for (var xx = 0; xx &lt; width; xx++) {
        if (grid [# xx, yy] == FLOOR) {
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 10);
        } else if (grid[# xx, yy] == WALL){
            tile_add(bg_wall, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 10);
        } else if (grid[# xx, yy] == CORNER) {
        
            var right = (grid[# xx+1, yy] == FLOOR || grid[# xx+1, yy] == CORNER)
            var left =  (grid[# xx-1, yy] == FLOOR || grid[# xx-1, yy] == CORNER)
            var down =  (grid[# xx, yy+1] == FLOOR || grid[# xx, yy+1] == CORNER)
            var up  =   (grid[# xx, yy-1] == FLOOR || grid[# xx, yy-1] == CORNER)
        
            if(right) {
                if(down) {
                    tile_add(bg_corner, CELL_WIDTH, CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, -10);
                } else {
                    tile_add(bg_corner, CELL_WIDTH, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, -10);
                }
            } else {
                if(down) {
                    tile_add(bg_corner, 0, CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, -10);
                } else {
                    tile_add(bg_corner, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, -10);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create players
//var width = room_width div CELL_WIDTH;
//var height = room_height div CELL_HEIGHT;
var middle_x = (width div 2)-1;
var middle_y = (height div 2)-1;
var color_offset = floor(255/(o_settings.teams*2));
var need_keyboard = o_settings.teams - o_settings.controllers;
var input = get_input_controller;
var controllers = o_settings.controllers;
var players = o_settings.availible_players;

for(team = 0; team &lt; o_settings.teams; team++) {
    var ai = false;
    if(controllers &gt; 0) {
        input = get_input_controller;
        controllers--;
        players--;
    } else {
        if(players &gt; 0) {
            if players == 2 {
                input = get_input_keyboard_secondary;
            } else {
                input = get_input_keyboard;
            }
            players--;
        } else {
            input = get_input_ai_easy;
        }
    }

    var hue = o_settings.alternate_color*color_offset+2*color_offset*team+irandom(color_offset);
    var prey = create_player(middle_x+(team mod 2), middle_y+(team div 2), PREY, team, input, hue);
    prey.collision_sound = snd_thump;
    var chaser = create_player(middle_x+(team mod 2), middle_y+(team div 2), CHASER, team, input, hue);
    chaser.rotation = 270;
    team_colors[team] = chaser.color_charge;
    prey.mate = chaser;
    chaser.mate = prey;
}

//Reset game
game_over = false;
score_limit = o_settings.score_per_team*(o_settings.teams-1);

if(winner != -1) {
    for(team = 0; team &lt; o_settings.teams; team++) {
        scores[team] = 0;
    }
}
winner = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI (scores, text)
if(game_over) {
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_set_font(fnt_main);
    for(team = 0; team &lt; array_length_1d(scores); team++) {
        draw_set_colour(team_colors[team]);
        draw_text((width-1)*16-0.5+(team mod 2)*32,(height-1)*16-2+(team div 2)*32,scores[team]);
    }
    draw_set_font(fnt_other);
    if(winner != -1) {
        draw_set_colour(team_colors[winner]);
        draw_text(room_width/2-1, room_height/2-64, "Game Over: The winners got "+string(scores[winner])+"/"+string(score_limit)+" points!");
        draw_set_colour(c_white);
        draw_text(room_width/2+1, room_height/2-64, "Game Over: The winners got "+string(scores[winner])+"/"+string(score_limit)+" points!");
        draw_text(room_width/2, room_height-16, "&lt; Press Spacebar to End &gt;")
    } else {
        draw_set_colour(c_white);
        draw_text(room_width/2, room_height-16, "&lt; Press Spacebar to Continue &gt;")
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
